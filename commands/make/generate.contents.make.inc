<?php
/**
 * @file
 * Functions for the generate makefile command.
 */

/**
 * Generate the actual contents of the .make file.
 */
function _drush_make_generate_makefile_contents($projects, $libraries = array(), $core_version = DRUPAL_CORE_COMPATIBILITY) {
  $header = array();
  $header[] = '; This file was auto-generated by drush make';
  $header['core'] = $core_version;
  $header[] = '';
  $header['api'] = MAKE_API;

  return _drush_make_generate_makefile_body($projects, $header) . _drush_make_generate_makefile_body($libraries);
}

function _drush_make_generate_makefile_body($projects, $output = array()) {
  $custom = FALSE;
  $previous_type = 'core';
  foreach ($projects as $name => $project) {
    $type = (isset($project['type']) && ($project['type'] == 'library')) ? 'libraries' : 'projects';
    if ($previous_type != $project['_type']) {
      $previous_type = $project['_type'];
      $output[] = '; ' . ucfirst($previous_type) . 's';
    }
    unset($project['_type']);
    if (!$project && is_string($name)) {
      $output[] = $type . '[] = "' . $name . '"';
      continue;
    }
    $base = $type . '[' . $name . ']';
    if (isset($project['custom_download'])) {
      $custom = TRUE;
      $output[] = '; Please fill the following out. Type may be one of get, git, bzr or svn,';
      $output[] = '; and url is the url of the download.';
      $output[$base . '[download][type]'] = '""';
      $output[$base . '[download][url]'] = '""';
      unset($project['custom_download']);
    }

    $output = array_merge($output, _drush_make_generate_lines($base, $project));
    $output[] = '';
  }
  $string = '';
  foreach ($output as $k => $v) {
    if (!is_numeric($k)) {
      $string .= $k . ' = ' . $v;
    }
    else {
      $string .= $v;
    }
    $string .= "\n";
  }
  if ($custom) {
    drush_log(dt('Some of the properties in your makefile will have to be manually edited. Please do that now.'), 'warning');
  }
  return $string;
}

/**
 * Write a makefile based on data parsed from a previous makefile.
 *
 * @param $file
 *   The path to the file to write our generated makefile to, or TRUE to
 *   print to the terminal.
 * @param $makefile
 *   A makefile on which to base our generated one.
 */
function make_generate_from_makefile($file, $makefile) {
  $projects = drush_get_option('DRUSH_MAKE_PROJECTS', FALSE);
  if ($projects === FALSE || drush_get_option('generate-update', FALSE)) {
    $info = _make_parse_info_file($makefile);
    if (drush_get_option('generate-update', FALSE)) {
      foreach ($info['projects'] as $name => $project) {
        unset($info['projects'][$name]['version']);
      }
    }
    $projects = make_prepare_projects(FALSE, $info);
    $projects = array_merge($projects['core'], $projects['contrib']);
  }
  $core = current($projects);
  $core = $core['core'];
  foreach ($projects as $name => $project) {
    // If a specific revision was requested, do not set the version.
    if (!isset($project['revision'])) {
      $projects[$name]['version'] = $project['download']['full_version'];

      if (strpos($projects[$name]['version'], $project['core']) === 0) {
        $projects[$name]['version'] = substr($projects[$name]['version'], strlen($project['core'] . '-'));
      }
    }
    else {
      unset($projects[$name]['version']);
    }
    $projects[$name]['_type'] = $project['type'];
    if (!(isset($project['download']['type'])) || ($project['download']['type'] == 'pm')) {
      unset($projects[$name]['download']); // PM is the default, don't clutter the makefile.
    }
    $ignore = array('build_path', 'contrib_destination', 'core', 'location', 'make_directory', 'l10n_url', 'download_type');
    foreach ($ignore as $key) {
      unset($projects[$name][$key]);
    }
  }

  $libraries = drush_get_option('DRUSH_MAKE_LIBRARIES', FALSE);
  if ($libraries === FALSE) {
    $info = _make_parse_info_file($makefile);
    $libraries = $info['libraries'];
  }
  foreach ($libraries as $name => $library) {
    $libraries[$name]['type'] = 'library';
    $libraries[$name]['_type'] = 'librarie';
  }

  $contents = _drush_make_generate_makefile_contents($projects, $libraries, $core);

  // Write or print our makefile.
  $file = $file !== TRUE ? $file : NULL;
  make_generate_print($contents, $file);
}

/**
 * Print the generated makefile to the terminal, or write it to a file.
 *
 * @param $contents
 *   The formatted contents of a makefile.
 * @param $file
 *   (optional) The path to write the makefile.
 */
function make_generate_print($contents, $file = NULL) {
  if (!$file) {
    drush_print($contents);
  }
  elseif (file_put_contents($file, $contents)) {
    drush_log(dt("Wrote .make file @file", array('@file' => $file)), 'ok');
  }
  else {
    drush_make_error('FILE_ERROR', dt("Unable to write .make file !file", array('!file' => $file)));
  }
}

/**
 * Utility function to generate the line or lines for a key/value pair in the
 * make file.
 *
 * @param $base
 *   The base for the configuration lines. Values will be appended to it as
 *   [$key] = $value, or if value is an array itself it will expand into as many
 *   lines as required.
 * @param $values
 *   May be a single value or an array.
 * @return
 *   An array of strings that represent lines for the make file.
 */
function _drush_make_generate_lines($base, $values) {
  $output = array();

  if (is_array($values)) {
    foreach ($values as $key => $value) {
      $newbase = $base . '[' . $key . ']';
      $output = array_merge($output, _drush_make_generate_lines($newbase, $value));
    }
  }
  else {
    $output[$base] = '"' . $values . '"';
  }

  return $output;
}
