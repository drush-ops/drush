<?php

/**
 * @file
 * Contains woot.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function woot_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the woot module.
    case 'help.page.woot':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Woot Mightily.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function woot_theme() {
  $theme = [];

  return $theme;
}

/**
 * Prints the entity type ID of the taxonomy term entity type.
 *
 * @see \Unish\UpdateDBTest::testEnableModuleViaUpdate()
 * @see \Unish\UpdateDBTest::testEnableModuleViaPostUpdate()
 */
function woot_get_taxonomy_term_entity_type_id()
{
    print \Drupal::entityTypeManager()->getDefinition("taxonomy_term")->id();
}

/**
 * Implements hook_migration_plugins_alter().
 */
function woot_migration_plugins_alter(array &$migration_plugins): void
{
    // Dynamically create the test_migration source data.
    $size = \Drupal::state()->get('woot.test_migration_source_data_amount', 2);
    foreach (range(1, $size) as $id) {
        $migration_plugins['test_migration']['source']['data_rows'][] = [
          'id' => $id,
          'name' => "Item {$id}",
        ];
    }

    // Allow tests to remove rows from the source.
    if ($removedRows = \Drupal::state()->get('woot.test_migration_source_removed_rows')) {
        $removedRows = explode(',', $removedRows);
        $migration_plugins['test_migration']['source']['data_rows'] = array_filter(
          $migration_plugins['test_migration']['source']['data_rows'],
          function (array $row) use ($removedRows): bool {
              return !in_array($row['id'], $removedRows);
          }
        );
        $migration_plugins['test_migration']['source']['data_rows'] = array_values($migration_plugins['test_migration']['source']['data_rows']);
    }

    if (\Drupal::state()->get('woot.test_command_progress_bar.skip_count')) {
        // Test the command progress bar for sources that skip count.
        // @see \Unish\MigrateRunnerTest::testCommandProgressBar()
        $migration_plugins['test_migration']['source']['skip_count'] = true;
    }
}
