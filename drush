#!/usr/bin/env php
<?php

/**
 * This is the Drush "finder" script, which is one part of the
 * Drush dispatching chain.  This is the script that
 * should appear in your global $PATH, or, if using composer
 * (as usually the case), will be found in your vendor/bin directory.
 *
 *
 * - Never copy this script to your site root. Use examples/drush instead.
 *
 * - Never copy this script to a directory other than its install directory.
 * Symlink to it instead.
 *
 * - Never rename this script to "drush.launcher".  Why would you do that?
 * This is the Drush "finder" script. You can rename it to "drush.finder"
 * if you wish.
 *
 *
 * OVERVIEW OF DRUSH FINDER / WRAPPER / LAUNCHER SCRIPTS
 *
 * When the user types "drush", up to three scripts might be
 * involved in the initial launch:
 *
 *   "drush finder" -> "drush wrapper" -> "drush launcher".
 *
 * Breif description of each:
 *
 *  - Drush finder:   Finds the right Drush script and calls it.
 *  - Drush wrapper:  Contains user customizations to options.
 *  - Drush launcher: Excutes drush.php.
 *
 * A full explanation of each script follows.
 *
 *
 * DRUSH FINDER
 *
 * - The "drush" script on the user's global $PATH
 * - It's goal is to find the correct site-local Drush to run.
 *
 * The Drush finder will locate the correct site-local Drush to use
 * by examining:
 *
 *   a) The --root option
 *   b) The site set via `drush site set` in the current terminal
 *   c) The cwd
 *
 * If no site-local Drush is found, then the global Drush will be
 * used.  The Drush finder assumes that the global Drush is the
 * "Drush launcher" found in the same directory as the Drush finder itself.
 *
 * If a site-local Drush is found, then the Drush finder will call
 * either the "Drush wrapper", if it exists, or the "Drush launcher" if
 * there is no wrapper script.  If the "Drush launcher" is called, then
 * the Drush Finder will add the --local flag.  If the --local flag was
 * already passed in when the Drush Finder is called, then it will always
 * call the "Drush launcher", even if there is a Drush Wrapper, to prevent
 * possible infinite loops.
 *
 *
 * DRUSH WRAPPER
 *
 * - The "drush" script that the user copies to their site __ROOT__
 * - Its goal is to allow the user to add options when --local is in use
 *
 * The drush "wrapper" is found in examples/drush, and may optionally
 * be copied to __ROOT__/drush by the user.  It may be named either
 * "drush" or "drush.wrapper".  It will call the "drush launcher"
 * for the same site that it is located in.  It adds the --local flag; the
 * user is encouraged to add other options to the "drush wrapper", e.g. to set
 * the location where aliases and global commandfiles can be found.
 * The drush "finder" script always calls the "drush wrapper" if it exists;
 * however, if the user does not want to customize the eary options of
 * the site-local Drush (site-alias locations, etc.), then the wrapper does not
 * need to be used.
 *
 *
 * DRUSH LAUNCHER
 *
 * - The "drush.launcher" script in vendor/bin
 * - The script formerly called "drush"
 *
 * The "drush launcher" is the traditional script that identifies PHP and
 * sets up to call drush.php.  It is called by the "drush wrapper", or
 * directly by the "drush launcher" if there is no "drush wrapper" in use.
 *
 *
 * LOCATIONS FOR THESE SCRIPTS
 *
 *   "drush finder"  :   __ROOT__/vendor/bin/drush           (composer install)
 *                       __DRUSH__/drush                     (source)
 *
 *   "drush wrapper" :   __ROOT__/drush                      (copied by user)
 *                       __DRUSH__/examples/drush            (source)
 *
 *   "drush laucher" :   __ROOT__/vendor/bin/drush.launcher  (composer install)
 *                       __DRUSH__/drush.launcher            (source)
 *
 *
 * BACKEND CALL DISPATCHING
 *
 * Backend calls are typically set up to call the "drush" script in the $PATH,
 * or perhaps some might call __ROOT__/vendor/bin/drush directly, by way
 * of the "drush-script" element in a site alias.  In either event, this is
 * the "drush finder" script.
 *
 * The backend call will always set --root.  The "drush finder" script
 * always favors the site-local Drush stored with the site indicated by the
 * --root option, if it exists.  If there is no site-local Drush, then the
 * "drush finder" will behave as usual (i.e., it will end up calling the
 * "drush launcher" located next to it).
 *
 * This should always get you the correct "Drush" for local and remote calls.
 * Note that it is also okay for aliases to specify a path directly to
 * drush.launcher, in instances where it is known that a recent version of
 * Drush is installed on the remote end.
 */

include __DIR__ . '/includes/startup.inc';

$found_script = "";
$home = getenv("HOME");
$use_dir = "$home/.drush/use";

// Drush site-set will always write both the terminal-specific
// and global links.  We should always use the terminal-specific
// link if posix_getppid() is available; otherwise, we will use
// the global location.
$site_use_link = "$use_dir/bin/drush";
if (function_exists('posix_getppid')) {
  $site_use_link = $use_dir . '/' . posix_getppid() . '/bin/drush';
}

//
// We need to do at least a partial parsing of the options,
// so that we can find --root / -r and --local
//
$VERBOSE=FALSE;
$LOCAL=FALSE;
$NONE=FALSE;
$ROOT=FALSE;
$VAR=FALSE;

foreach ($argv as $option) {
  // If a variable to set was indicated on the
  // previous iteration, then set the value of
  // the named variable (e.g. "ROOT") to "$option".
  if ($VAR) {
    $$VAR = "$option";
    $VAR = FALSE;
  }
  else {
    switch ($option) {
      case "--local":
        $LOCAL = TRUE;
        break;

      case "@none":
        $NONE = TRUE;
        break;

      case "-r":
        $VAR = "ROOT";
        break;

      case "--verbose":
      case "-v":
        $VERBOSE = TRUE;
        break;
    }
    if (substr($option, 0, 7) == "--root=") {
      $ROOT = substr($option, 7);
    }
  }
}

//
// First check:
//
//   drush --local ...
//   drush @none ...
//
// If either the --local option, or the @none alias is used, then
// we must skip the Drush wrapper, and call the Drush launcher directly.
//
// In this instance, we are assuming that the 'drush' that is being
// called is:
//
//  a) The global 'drush', or
//  b) A site-local 'drush' in a vendor/bin directory.
//
// In either event, the appropriate 'drush.launcher' should be right next
// to this script (stored in the same directory).
if ($NONE || $LOCAL) {
  if (is_file(__DIR__ . "/drush.launcher")) {
    $found_script = __DIR__ . "/drush.launcher";
  }
  else {
    fwrite(STDERR, "Could not find drush.launcher in " . __DIR__ . ". Check your installation.\n");
    exit(1);
  }
}

//
// Second check:
//
//   drush --root=/path
//
// If the site root is specified via a commandline option, then we
// should always use the Drush stored at this root, if there is one.
// We will first check for a "wrapper" script at the root, and then
// we will look for a "launcher" script in vendor/bin.
//
if (empty($found_script)) {
  $found_script = find_wrapper_or_launcher($ROOT);
  if (!empty("$found_script")) {
    chdir("$ROOT");
  }
}

//
// Third check:
//
// If there is a "drush" symlink in the "use dir",
// then we will use the Drush indicated by this file.
//
if (empty($found_script)) {
  if (is_file("$site_use_link")) {
    $found_script = "$site_use_link";
  }
}

//
// Fourth check:
//
// If there is a .drush-use file, then its contents will
// contain the path to the Drush to use.
//
if (empty($found_script)) {
  if (is_file(".drush-use")) {
    $found_script = file_get_contents(".drush-use");
  }
}

//
// Fifth check:
//
// Look for a 'drush' wrapper or launcher at the cwd,
// and in each of the directories above the cwd.  If
// we find one, use it.
//
if (empty($found_script)) {
  $c = getcwd();
  while (!empty($c) && ($c != "/")) {
    $found_script = find_wrapper_or_launcher($c);
    if ($found_script) {
      chdir($c);
      break;
    }
    $c = dirname($c);
  }
}

if (!empty("$found_script")) {
  $found_script = realpath($found_script);

  // Guard against errors:  if we have found a "drush" script
  // (that is, theoretically a drush wrapper script), and
  // there is a "drush.launcher" script in the same directory,
  // then we will skip the "drush" script and use the drush launcher
  // instead.  This is because drush "wrapper" scripts should
  // only ever exist at the root of a site, and there should
  // never be a drush "launcher" at the root of a site.
  // Therefore, if we find a "drush.launcher" next to a script
  // called "drush", we have probably found a Drush install directory,
  // not a site root.  Adjust appropriately.  Note that this
  // also catches the case where a drush "finder" script finds itself.
  if (is_file(dirname($found_script) . "/drush.launcher")) {
    $found_script = dirname($found_script) . "/drush.launcher";
  }
}

// Didn't find any site-local Drush, or @use'd Drush?
// In that case, there should always be a drush.launcher in
// the same directory this script is stored in; use that.
if (empty($found_script)) {
  $found_script = __DIR__ . "/drush.launcher";
}

// Emit a message in verbose mode advertising the location of the
// script we found.
if ($VERBOSE) {
  fwrite(STDERR, "Using the Drush script found at $found_script\n");
}

// Get the arguments for the command.  Shift off argv[0],
// which contains the name of this script.
$arguments = $argv;
array_shift($arguments);

// Prepare the environment for pnctl_exec.
$env = $_ENV;

// If PHP is not configured correctly, $_ENV will be
// empty.  Drush counts on the fact that environment
// variables will always be passed through, so we
// need to repair this situation.
if (empty($env)) {
  exec('printenv', $env_items);
  foreach ($env_items as $item) {
    list($key, $value) = explode('=', $item, 2);
    $env[$key] = $value;
  }
}

// Launch the new script in the same process.
// If the launch succeeds, then it will not return.
pcntl_exec($found_script, $arguments, $env);
exit(1);
